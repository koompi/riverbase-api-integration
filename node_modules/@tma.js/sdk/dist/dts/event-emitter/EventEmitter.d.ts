import type { AnySubscribeListener, EmptyEventName, EventListener, EventName, EventParams, NonEmptyEventName, RemoveEventListener } from './types.js';
/**
 * Opinionated event emitter implementation.
 */
export declare class EventEmitter<Schema> {
    private readonly listeners;
    private readonly subscribeListeners;
    /**
     * Adds specified event listener.
     * @param event - event name.
     * @param listener - event listener.
     * @param once - should listener called only once.
     */
    private addListener;
    /**
     * Emits known event which has no parameters.
     * @param event - event name.
     */
    emit<E extends EmptyEventName<Schema>>(event: E): void;
    /**
     * Emits known event which has parameters.
     * @param event - event name.
     * @param args - list of event listener arguments.
     */
    emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;
    /**
     * Adds event listener.
     * @param event - event name.
     * @param listener - event listener.
     * @returns Function to remove event listener.
     */
    on<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): RemoveEventListener;
    /**
     * Adds event listener following the logic, described in `on` method, but calls specified
     * listener only once, removing it after.
     * @param event - event name.
     * @param listener - event listener.
     * @returns Function to remove event listener.
     * @see on
     */
    once<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): RemoveEventListener;
    /**
     * Removes event listener. In case, specified listener was bound several times, it removes
     * only a single one.
     * @param event - event name.
     * @param listener - event listener.
     */
    off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void;
    /**
     * Adds event listener to all events.
     * @param listener - events listener.
     * @returns Function to remove event listener.
     * @see on
     * @see once
     */
    subscribe(listener: AnySubscribeListener<Schema>): RemoveEventListener;
    /**
     * Removes global event listener. In case, specified listener was bound several times, it removes
     * only a single one.
     * @param listener - events listener.
     * @returns Function to remove event listener.
     */
    unsubscribe(listener: AnySubscribeListener<Schema>): void;
}
