import type { MiniAppsEventName, MiniAppsEventParams } from './events/events.js';
import type { MiniAppsEmptyMethodName, MiniAppsMethodName, MiniAppsMethodParams, MiniAppsNonEmptyMethodName } from './methods/methods.js';
import type { If } from '../types/logical.js';
import type { ExecuteWithOptions } from '../types/methods.js';
import type { IsNever } from '../types/utils.js';
/**
 * Simple `request` method options.
 */
export type RequestSimpleOptions<Method extends MiniAppsMethodName> = Omit<RequestCompleteOptions<Method, any>, 'method' | 'event'>;
/**
 * Complete `request` method options.
 */
export type RequestCompleteOptions<Method extends MiniAppsMethodName, Event extends MiniAppsEventName> = {
    /**
     * Mini Apps method name.
     */
    method: Method;
    /**
     * One or many tracked Mini Apps events.
     */
    event: Event | Event[];
    /**
     * Should return true in case, this event should be captured. If not specified,
     * request is not skipping captured events.
     */
    capture?: If<IsNever<MiniAppsEventParams<Event>>, () => boolean, (payload: MiniAppsEventParams<Event>) => boolean>;
} & ExecuteWithOptions & If<IsNever<MiniAppsMethodParams<Method>>, {}, {
    /**
     * List of method parameters.
     */
    params: MiniAppsMethodParams<Method>;
}>;
/**
 * Calls specified Mini Apps method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param options - method options.
 */
export declare function request<Method extends MiniAppsEmptyMethodName, Event extends MiniAppsEventName>(options: RequestCompleteOptions<Method, Event>): Promise<MiniAppsEventParams<Event>>;
/**
 * Calls specified Mini Apps method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param method - method name.
 * @param eventOrEvents - tracked event or events.
 * @param options - method options.
 */
export declare function request<Method extends MiniAppsNonEmptyMethodName, Event extends MiniAppsEventName>(method: Method, eventOrEvents: Event | Event[], options: RequestSimpleOptions<Method>): Promise<MiniAppsEventParams<Event>>;
/**
 * Calls specified Mini Apps method and captures one of the specified events. Returns promise
 * which will be resolved in case, specified event was captured.
 * @param method - method name.
 * @param eventOrEvents - tracked event or events.
 * @param options - method options.
 */
export declare function request<Method extends MiniAppsEmptyMethodName, Event extends MiniAppsEventName>(method: Method, eventOrEvents: Event | Event[], options?: RequestSimpleOptions<Method>): Promise<MiniAppsEventParams<Event>>;
