import type { AnyParser } from './types.js';
import type { ParseResult, ValueParserOverrides } from './ValueParser.js';
import { ValueParser } from './ValueParser.js';
export type OfResult<BaseClass, ItemType, IsOptional extends boolean> = ArrayParserType<BaseClass, ItemType, IsOptional>;
export interface ArrayParserOverrides<BaseClass, ItemType, IsOptional extends boolean> extends ValueParserOverrides<BaseClass, ItemType[], IsOptional> {
    /**
     * Specifies parser for each array item.
     * @param parser - item parser.
     */
    of<Item>(parser: AnyParser<Item>): OfResult<BaseClass, Item, IsOptional>;
}
export type ArrayParserType<BaseClass, ItemType, IsOptional extends boolean> = Omit<BaseClass, keyof ArrayParserOverrides<any, any, any>> & ArrayParserOverrides<BaseClass, ItemType, IsOptional>;
export declare class ArrayValueParser<ItemType, IsOptional extends boolean> extends ValueParser<unknown[], IsOptional> {
    private itemParser;
    constructor(itemParser: AnyParser<ItemType>, isOptional: IsOptional, type?: string);
    parse(value: unknown): ParseResult<ItemType[], IsOptional>;
    of<Item>(itemParser: AnyParser<Item>): OfResult<this, Item, IsOptional>;
}
