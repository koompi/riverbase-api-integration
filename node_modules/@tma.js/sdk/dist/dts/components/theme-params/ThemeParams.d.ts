import type { ThemeParamsEvents, ThemeParamsParsed } from './types.js';
import type { RemoveListenerFn } from '../../bridge/events/types.js';
import type { RGB } from '../../colors/types.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
type Emitter = EventEmitter<ThemeParamsEvents>;
export declare class ThemeParams {
    private readonly ee;
    private readonly state;
    constructor(params: ThemeParamsParsed);
    /**
     * @since v6.10
     */
    get accentTextColor(): RGB | undefined;
    get backgroundColor(): RGB | undefined;
    get buttonColor(): RGB | undefined;
    get buttonTextColor(): RGB | undefined;
    get destructiveTextColor(): RGB | undefined;
    /**
     * Retrieves palette color value by its name.
     * @param key - palette key name.
     */
    get(key: Extract<keyof ThemeParamsParsed, string>): RGB | undefined;
    /**
     * Returns the copy of the internal state of the current component instance.
     */
    getState(): ThemeParamsParsed;
    /**
     * @since v6.10
     */
    get headerBackgroundColor(): RGB | undefined;
    get hintColor(): RGB | undefined;
    /**
     * Returns true in case, current color scheme is recognized as dark. This
     * value is calculated according to theme background color.
     */
    get isDark(): boolean;
    get linkColor(): RGB | undefined;
    /**
     * Adds new event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     */
    off: Emitter['off'];
    get secondaryBackgroundColor(): RGB | undefined;
    /**
     * @since v6.10
     */
    get sectionBackgroundColor(): RGB | undefined;
    /**
     * @since v6.10
     */
    get sectionHeaderTextColor(): RGB | undefined;
    /**
     * Starts listening to theme changes and applies them.
     * @returns Function to stop listening.
     */
    listen(): RemoveListenerFn;
    /**
     * @since v6.10
     */
    get subtitleTextColor(): RGB | undefined;
    get textColor(): RGB | undefined;
}
export {};
