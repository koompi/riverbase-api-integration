import type { OpenPopupOptions, PopupEvents } from './types.js';
import type { PostEvent } from '../../bridge/methods/postEvent.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
import type { SupportsFunc } from '../../supports/types.js';
import type { Version } from '../../version/types.js';
type Emitter = EventEmitter<PopupEvents>;
/**
 * Controls currently displayed application popup. It allows developers to
 * open new custom popups and detect popup-connected events.
 */
export declare class Popup {
    private readonly postEvent;
    private readonly ee;
    private readonly state;
    constructor(version: Version, postEvent?: PostEvent);
    private set isOpened(value);
    /**
     * True if popup is currently opened.
     */
    get isOpened(): boolean;
    /**
     * Adds new event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     */
    off: Emitter['off'];
    /**
     * A method that shows a native popup described by the `params` argument.
     * Promise will be resolved when popup is closed. Resolved value will have
     * an identifier of pressed button.
     *
     * In case, user clicked outside the popup or clicked top right popup close
     * button, null will be returned.
     *
     * FIXME: In desktop, this function may work incorrectly.
     *  Issue: https://github.com/Telegram-Mini-Apps/tma.js/issues/7
     * @param options - popup parameters.
     * @throws {Error} Popup is already opened.
     */
    open(options: OpenPopupOptions): Promise<string | null>;
    /**
     * Checks if specified method is supported by current component.
     */
    supports: SupportsFunc<'open'>;
}
export {};
