import type { MiniAppEvents, MiniAppHeaderColor, MiniAppProps, RequestedContact } from './types.js';
import type { PhoneRequestedStatus } from '../../bridge/events/parsers/phoneRequested.js';
import type { WriteAccessRequestedStatus } from '../../bridge/events/parsers/writeAccessRequested.js';
import type { SwitchInlineQueryChatType } from '../../bridge/methods/methods.js';
import type { RGB } from '../../colors/types.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
import type { SupportsFunc } from '../../supports/types.js';
import type { ExecuteWithTimeout } from '../../types/methods.js';
type Emitter = EventEmitter<MiniAppEvents>;
/**
 * Provides common Mini Apps functionality not covered by other system components.
 */
export declare class MiniApp {
    private readonly ee;
    private readonly state;
    private readonly botInline;
    private readonly postEvent;
    private readonly createRequestId;
    private requestingPhoneAccess;
    private requestingWriteAccess;
    constructor(props: MiniAppProps);
    /**
     * Attempts to get requested contact.
     */
    private getRequestedContact;
    /**
     * The Mini App background color.
     */
    get backgroundColor(): RGB;
    /**
     * Closes the Mini App.
     */
    close(): void;
    /**
     * The Mini App header color. Could either be a header color key or RGB color.
     */
    get headerColor(): MiniAppHeaderColor;
    /**
     * True if Mini App is currently launched in bot inline mode.
     */
    get isBotInline(): boolean;
    /**
     * True if current Mini App background color recognized as dark.
     */
    get isDark(): boolean;
    /**
     * True if phone access is currently being requested.
     */
    get isRequestingPhoneAccess(): boolean;
    /**
     * True if write access is currently being requested.
     */
    get isRequestingWriteAccess(): boolean;
    /**
     * Adds new event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     */
    off: Emitter['off'];
    /**
     * Informs the Telegram app that the Mini App is ready to be displayed.
     *
     * It is recommended to call this method as early as possible, as soon as all essential
     * interface elements loaded. Once this method called, the loading placeholder is hidden
     * and the Mini App shown.
     *
     * If the method not called, the placeholder will be hidden only when the page fully loaded.
     */
    ready(): void;
    /**
     * Requests current user contact information. In contrary to requestPhoneAccess, this method
     * returns promise with contact information that rejects in case, user denied access, or request
     * failed.
     * @param options - additional options.
     */
    requestContact({ timeout }?: ExecuteWithTimeout): Promise<RequestedContact>;
    /**
     * Requests current user phone access. Method returns promise, which resolves
     * status of the request. In case, user accepted the request, Mini App bot will receive
     * the according notification.
     *
     * To obtain the retrieved information instead, utilize the requestContact method.
     * @param options - additional options.
     * @see requestContact
     */
    requestPhoneAccess(options?: ExecuteWithTimeout): Promise<PhoneRequestedStatus>;
    /**
     * Requests write message access to current user.
     * @param options - additional options.
     */
    requestWriteAccess(options?: ExecuteWithTimeout): Promise<WriteAccessRequestedStatus>;
    /**
     * A method used to send data to the bot. When this method called, a service message sent to
     * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the
     * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).
     *
     * This method is only available for Mini Apps launched via a Keyboard button.
     * @param data - data to send to bot.
     * @throws {Error} data has incorrect size.
     */
    sendData(data: string): void;
    /**
     * Updates current Mini App header color.
     * @param color - color key or RGB color.
     */
    setHeaderColor(color: MiniAppHeaderColor): void;
    /**
     * Updates current Mini App background color.
     * @param color - RGB color.
     */
    setBackgroundColor(color: RGB): void;
    /**
     * Checks if specified method is supported by current component.
     */
    supports: SupportsFunc<'requestWriteAccess' | 'requestPhoneAccess' | 'switchInlineQuery' | 'setHeaderColor' | 'setBackgroundColor'>;
    /**
     * Checks if specified method parameter is supported by current component.
     */
    supportsParam: SupportsFunc<'setHeaderColor.color'>;
    /**
     * Inserts the bot's username and the specified inline query in the current chat's input field.
     * Query may be empty, in which case only the bot's username will be inserted. The client prompts
     * the user to choose a specific chat, then opens that chat and inserts the bot's username and
     * the specified inline query in the input field.
     * @param text - text which should be inserted in the input after the current bot name. Max
     * length is 256 symbols.
     * @param chatTypes - List of chat types which could be chosen to send the message. Could be
     * empty list.
     */
    switchInlineQuery(text: string, chatTypes?: SwitchInlineQueryChatType[]): void;
}
export {};
