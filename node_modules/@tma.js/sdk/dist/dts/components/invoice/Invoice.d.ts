import type { InvoiceEvents } from './types.js';
import type { InvoiceStatus } from '../../bridge/events/parsers/invoiceClosed.js';
import type { PostEvent } from '../../bridge/methods/postEvent.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
import type { SupportsFunc } from '../../supports/types.js';
import type { Version } from '../../version/types.js';
type Emitter = EventEmitter<InvoiceEvents>;
/**
 * Controls currently displayed invoice.
 */
export declare class Invoice {
    private readonly postEvent;
    private readonly ee;
    private readonly state;
    constructor(version: Version, postEvent?: PostEvent);
    private set isOpened(value);
    /**
     * True if invoice is currently opened.
     */
    get isOpened(): boolean;
    /**
     * Adds new event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     */
    off: Emitter['off'];
    /**
     * Opens an invoice using its slug.
     * @param slug - invoice slug.
     * @throws {Error} Invoice is already opened.
     */
    open(slug: string): Promise<InvoiceStatus>;
    /**
     * Opens an invoice using its url. It expects passing link in full format, with hostname "t.me".
     * @param url - invoice URL.
     * @param type - value type.
     * @throws {Error} Invoice is already opened.
     */
    open(url: string, type: 'url'): Promise<InvoiceStatus>;
    /**
     * Checks if specified method is supported by current component.
     */
    supports: SupportsFunc<'open'>;
}
export {};
