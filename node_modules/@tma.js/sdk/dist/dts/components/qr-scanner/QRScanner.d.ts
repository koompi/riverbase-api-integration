import type { QRScannerEvents } from './types.js';
import type { PostEvent } from '../../bridge/methods/postEvent.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
import type { SupportsFunc } from '../../supports/types.js';
import type { Version } from '../../version/types.js';
type Emitter = EventEmitter<QRScannerEvents>;
/**
 * Provides QR scanner functionality.
 */
export declare class QRScanner {
    private readonly postEvent;
    private readonly ee;
    private readonly state;
    constructor(version: Version, postEvent?: PostEvent);
    /**
     * Closes scanner.
     */
    close(): void;
    private set isOpened(value);
    /**
     * Returns true in case, QR scanner is currently opened.
     */
    get isOpened(): boolean;
    /**
     * Opens scanner with specified title shown to user. Method returns promise
     * with scanned QR content in case, it was scanned. It will contain null in
     * case, scanner was closed.
     * @param text - title to display.
     */
    open(text?: string): Promise<string | null>;
    /**
     * Adds new event listener.
     */
    on: Emitter['on'];
    /**
     * Removes event listener.
     */
    off: Emitter['off'];
    /**
     * Checks if specified method is supported by current component.
     */
    supports: SupportsFunc<'open' | 'close'>;
}
export {};
