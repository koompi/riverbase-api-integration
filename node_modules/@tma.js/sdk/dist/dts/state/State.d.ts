import type { StateEvents } from './types.js';
import type { EventEmitter } from '../event-emitter/EventEmitter.js';
import type { StringKeys } from '../types/utils.js';
/**
 * Represents state which is observable via passed EventEmitter.
 */
export declare class State<S extends object> {
    private readonly state;
    private readonly ee;
    constructor(state: S, ee: Pick<EventEmitter<StateEvents<S>>, 'on' | 'off' | 'emit'>);
    private internalSet;
    /**
     * Returns copy of current state.
     */
    clone(): S;
    /**
     * Sets value by key.
     * @param key - state key.
     * @param value - value to set.
     */
    set<K extends StringKeys<S>>(key: K, value: S[K]): void;
    set(state: Partial<S>): void;
    /**
     * Returns value by specified key.
     * @param key - state key.
     */
    get<K extends StringKeys<S>>(key: K): S[K];
}
