import type { HashNavigatorEventsMap, HashNavigatorOptions } from './types.js';
import { EventEmitter } from '../../event-emitter/EventEmitter.js';
import { Navigator } from '../Navigator/Navigator.js';
import type { NavigatorConEntry, PerformGoOptions, PerformPushOptions, PerformReplaceOptions } from '../Navigator/types.js';
type HashNavigatorEventEmitter = EventEmitter<HashNavigatorEventsMap>;
export declare class HashNavigator extends Navigator<Promise<void>> {
    /**
     * Creates navigator from current window location hash.
     * @param options - options passed to constructor.
     */
    static fromLocation(options?: HashNavigatorOptions): HashNavigator;
    private readonly ee;
    private attached;
    constructor(entries: NavigatorConEntry[], entriesCursor: number, options?: HashNavigatorOptions);
    /**
     * Handles window "popstate" event.
     * @param state - event state.
     */
    private onPopState;
    protected performGo(options: PerformGoOptions): Promise<void>;
    protected performPush({ before, after }: PerformPushOptions): Promise<void>;
    protected performReplace(options: PerformReplaceOptions): Promise<void>;
    /**
     * Synchronizes current navigator state with browser history.
     */
    private syncHistory;
    private emitChanged;
    /**
     * Attaches current navigator to the browser history allowing navigator to manipulate it.
     */
    attach(): Promise<void>;
    back: () => Promise<void>;
    /**
     * Detaches current navigator from the browser history.
     */
    detach(): void;
    /**
     * Adds new event listener.
     */
    on: HashNavigatorEventEmitter['on'];
    /**
     * Removes event listener.
     */
    off: HashNavigatorEventEmitter['off'];
}
export {};
