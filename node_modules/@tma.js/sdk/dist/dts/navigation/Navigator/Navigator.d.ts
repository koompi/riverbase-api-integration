import type { AnyEntry, NavigationEntry, NavigatorConEntry, NavigatorOptions, PerformGoOptions, PerformPushOptions, PerformReplaceOptions } from './types.js';
import { Logger } from '../../logger/Logger.js';
/**
 * Represents basic navigator implementation which uses only memory to store and control
 * navigation state.
 */
export declare abstract class Navigator<T> {
    protected entriesCursor: number;
    protected logger: Logger;
    protected readonly entries: NavigationEntry[];
    constructor(entries: NavigatorConEntry[], entriesCursor: number, { debug, loggerPrefix, }: NavigatorOptions);
    protected abstract performGo(options: PerformGoOptions): T;
    protected abstract performPush(options: PerformPushOptions): T;
    protected abstract performReplace(options: PerformReplaceOptions): T;
    /**
     * Converts entry to the navigation entry.
     * @param entry - entry data
     */
    private formatEntry;
    /**
     * Current entry.
     */
    protected get entry(): NavigationEntry;
    /**
     * Goes back in history.
     */
    back(): T;
    /**
     * Current entries cursor.
     */
    get cursor(): number;
    /**
     * True if navigator can go back.
     */
    get canGoBack(): boolean;
    /**
     * True if navigator can go forward.
     */
    get canGoForward(): boolean;
    /**
     * Goes forward in history.
     */
    forward(): T;
    /**
     * Moves entries cursor by specified delta.
     * @param delta - cursor delta.
     */
    go(delta: number): T;
    /**
     * Returns copy of navigator entries.
     */
    getEntries(): NavigationEntry[];
    /**
     * Current hash.
     * @example
     * "", "#", "#hash"
     */
    get hash(): string;
    /**
     * Pushes new entry. Method replaces all entries after the current one with the inserted.
     * @param entry - entry data.
     *
     * @example Pushing absolute pathname.
     * push("/absolute-path"); // "/absolute-path"
     *
     * @example Pushing relative pathname.
     * // Pushing relative path replaces N last path parts, where N is pushed pathname parts count.
     * // Pushing empty path is recognized as relative, but not replacing the last pathname part.
     * push("relative"); // "/home/root" -> "/home/relative"
     *
     * @example Pushing query parameters.
     * push("/absolute?my-param=1"); // "/home" -> "/absolute?my-param=1"
     * push("relative?my-param=1"); // "/home/root" -> "/home/relative?my-param=1"
     * push("?my-param=1"); // "/home" -> "/home?my-param=1"
     *
     * @example Pushing hash.
     * push("#my-hash"); // "/home" -> "/home#my-hash"
     * push("johny#my-hash"); // "/home/root" -> "/home/johny#my-hash"
     */
    push(entry: AnyEntry): T;
    /**
     * Current full path including pathname, query parameters and hash.
     */
    get path(): string;
    /**
     * Current pathname.
     * @example
     * "/", "/abc"
     */
    get pathname(): string;
    /**
     * Replaces current entry. Has the same logic as `push` method.
     * @param entry - entry data.
     * @see push
     * @returns True if changes were done.
     */
    replace(entry: AnyEntry): T;
    /**
     * Current query parameters.
     * @example
     * "", "?", "?a=1"
     */
    get search(): string;
}
