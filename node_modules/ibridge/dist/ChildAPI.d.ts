import Emittery from "emittery";
export interface IConstructorArgs<TModel, TContext> {
    child: Window;
    parent: Window;
    parentOrigin: string;
    model: TModel;
    context: TContext;
}
export default class ChildAPI<TModel = object, TContext = any> extends Emittery {
    private model;
    readonly parent: Window;
    readonly child: Window;
    readonly parentOrigin: string;
    context?: TContext;
    static init<TModel, TContext>(model: TModel, context?: TContext): Promise<ChildAPI<TModel, TContext>>;
    constructor({ child, parent, parentOrigin, model, context, }: IConstructorArgs<TModel, TContext | undefined>);
    listener(e: MessageEvent): Promise<void>;
    emitToParent(eventName: string, data: unknown): void;
    listenToGet(): void;
}
