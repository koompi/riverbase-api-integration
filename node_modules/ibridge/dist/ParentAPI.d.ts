import Emittery from "emittery";
/**
 * The maximum number of attempts to send a handshake request to the parent
 */
export declare const maxHandshakeRequests = 5;
interface IConstructorArgs {
    parent: Window;
    child: Window;
    frame: HTMLIFrameElement;
    childOrigin: string;
}
export interface IInitArgs {
    container?: HTMLElement;
    url: string;
    name?: string;
    classList?: Array<string>;
}
export default class ParentAPI extends Emittery {
    readonly parent: Window;
    readonly child: Window;
    readonly frame: HTMLIFrameElement;
    readonly childOrigin: string;
    static init({ container, url, name, classList, }: IInitArgs): Promise<ParentAPI>;
    constructor({ parent, child, frame, childOrigin }: IConstructorArgs);
    private listener;
    get(property: string, ...args: Array<any>): Promise<any>;
    emitToChild(eventName: string, data: unknown): void;
    destroy(): void;
}
export {};
